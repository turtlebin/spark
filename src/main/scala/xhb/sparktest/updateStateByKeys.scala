package xhb.sparktest

import org.apache.spark.streaming.StreamingContext
import org.apache.spark.SparkConf
import org.apache.spark.streaming.Seconds
import org.apache.spark.HashPartitioner

object StatefulNetworkWordCount {
  
//  def updateStateByKey[S: ClassTag](
//    updateFunc: (Seq[V], Option[S]) => Option[S],
//    partitioner: Partitioner,
//    initialRDD: RDD[(K, S)]): DStream[(K, S)] = {
//    val newUpdateFunc = (iterator: Iterator[(K, Seq[V], Option[S])]) => {
//      iterator.flatMap(t => updateFunc(t._2, t._3).map(s => (t._1, s)))
//    }
//    updateStateByKey(newUpdateFunc, partitioner, true, initialRDD)
//  }
  
  def main(args: Array[String]) {
    if (args.length < 2) {
      System.err.println("Usage: StatefulNetworkWordCount <hostname> <port>")
      System.exit(1)
    }

    //Logger.getLogger("org.apache.spark").setLevel(Level.WARN)

    val updateFunc = (values: Seq[Int], state: Option[Int]) => {
      val currentCount = values.sum

      val previousCount = state.getOrElse(0)

      Some(currentCount + previousCount)
    }

    val newUpdateFunc = (iterator: Iterator[(String, Seq[Int], Option[Int])]) => {
      iterator.flatMap(t => updateFunc(t._2, t._3).map(s => (t._1, s)))
    }

    val sparkConf = new SparkConf().setAppName("StatefulNetworkWordCount").setMaster("local")
    // Create the context with a 1 second batch size
    val ssc = new StreamingContext(sparkConf, Seconds(1))
    ssc.checkpoint(".")

    // Initial RDD input to updateStateByKey
    val initialRDD = ssc.sparkContext.parallelize(List(("hello", 1), ("world", 1)))

    // Create a ReceiverInputDStream on target ip:port and count the
    // words in input stream of \n delimited test (eg. generated by 'nc')
    val lines = ssc.socketTextStream(args(0), args(1).toInt)
    val words = lines.flatMap(_.split(" "))
    val wordDstream = words.map(x => (x, 1))

    // Update the cumulative count using updateStateByKey
    // This will give a Dstream made of state (which is the cumulative count of the words)
    val stateDstream = wordDstream.updateStateByKey[Int](
      newUpdateFunc,
      new HashPartitioner(ssc.sparkContext.defaultParallelism), true, initialRDD)
    stateDstream.print()
    ssc.start() 
    ssc.awaitTermination()
    
    
//     def main(args: Array[String]): Unit = {
//    val conf = new SparkConf()
//        .setMaster("local[2]")  
//        .setAppName("UpdateStateByKeyWordCount")
//    val ssc = new StreamingContext(conf, Seconds(5))
//    ssc.checkpoint("hdfs://spark1:9000/wordcount_checkpoint")  
//    
//    val lines = ssc.socketTextStream("spark1", 9999)
//    val words = lines.flatMap { _.split(" ") }   
//    val pairs = words.map { word => (word, 1) } 
//    val wordCounts = pairs.updateStateByKey((values: Seq[Int], state: Option[Int]) => {
//      var newValue = state.getOrElse(0)    
//      for(value <- values) {
//        newValue += value
//      }
//      Option(newValue)  
//    })
//    
//    wordCounts.print()  
//    
//    ssc.start()
//    ssc.awaitTermination()
//  }
  }
}